to create parent directory,with nested folder inside parent directory we use,
mkdir -p parent/child/grandchild folder names

to recursively add multiples files to staging we use,
git add .

add,commit,pull( to take pull from branch if any other team member had pushed their code) and push


we have added files to staging but if we want to remove a file from staging back to working directory then we use git status to know what next,
git reset HEAD filename ## Unstages the changes for a specific file

if we need to go back to previous commit ie discarding recently made changes needs to be discareded then use git status to know what next,
(to discard chnages in working directory)
git checkout -- filename # Reverts the changes for a specific file to the last committed state

moving within directory:
to rename filename in git,
git mv currentfilename newfilename (git level changing)-- git understands renaming is done

os level to rename without git, so it is bash command
mv currentfilename new filename----here git understands as old file is deleted and new file is added

git add -A (add all changes(renamed,moved files etc) to staging area)

moving outside directory
git mv currentfilename path(directoryname)

deleting files in git:
to delete files which are not in staging ie not tracked by git yet
git rm filename.extension gives error as this filename is not yet staged,so we need to use bash command ie
rm filename

mkdir -p parent/child/grandchild creates directories

git add -A: Stages all changes in the repository (modifications, new files, and deletions).

git add .: Stages changes in the current directory and its subdirectories (modifications and new files, but not deletions).


git alias::

global alias:
git config --global alias.aliasname 'gitcommand'

ex: git config --global alias.co 'checkout'

above command can be accessed as git co

local alias:
git config alais.aliasname 'gitcommand'

git ignorne(ignoring unwanted files):
in order to avoid unwanted files we need to check if .gitignore file is avaiable in working directory or not.
if not create .gitignore
--add 1 expression per line.it can be:
1. specific file: myfile.extension
2. file pattern: *.extension
3.folder: myfolder/


--lets say we log files multiple to exclude them in .gitignore file we can use *.log

